1/29: https://www.hackerrank.com/challenges/insert-a-node-at-a-specific-position-in-a-linked-list/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=linked-lists

1/31: Reversing a linked list iteratively
1/31: Reversing a linked list recursively
1/31: https://www.hackerrank.com/challenges/reverse-a-doubly-linked-list/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=linked-lists

2/1: Reversing a linked list recursively
2/1: Find merge point of linked list using while loop
2/1: Find merge point of linked list using for loop
2/1: Find merge point of linked list using set. 

2/2: Find merge point of linked list in best method. 
2/2: It has been a long time and I want to review quicksort lomuto
2/2: And quicksort hoare. 
2/2: And binary search

2/3: Solve the specific case of the recursive staircase problem without using bottom up on https://www.hackerrank.com/challenges/ctci-recursive-staircase/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=recursion-backtracking
2/3: Solve the specific case of the recursive staircase problem using bottom up on https://www.hackerrank.com/challenges/ctci-recursive-staircase/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=recursion-backtracking
2/3: Solve a more general case of recursive staircase (can step any number of stairs in a certain set)
2/3: Solving fibonacci using a bottom-up approach.  
2/3: Quicksort lomuto (including duplicates). 
2/3: Quicksort hoare (including duplicates). 
2/3: Quicksort udacity
2/3: Binary search iteratively. 
2/3: Binary search recursively. 
2/3: Merge sort. 

2/4: Practice recursive staircase problem with memoization https://www.hackerrank.com/challenges/ctci-recursive-staircase/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=recursion-backtracking
2/4: Quicksort udacity
2/4: Solve the mergesort problem recursively: https://practice.geeksforgeeks.org/problems/merge-sort/1 
2/4: Figure out how to solve merge sort iteratively. 

2/5: Solve the mergesort problem recursively:https://practice.geeksforgeeks.org/problems/merge-sort/1 
2/5: Solve the mergesort problem recursively with copying only the left side of the array and only using one big array and adding special condition. https://practice.geeksforgeeks.org/problems/merge-sort/1 

https://dzone.com/articles/recursive-and-iterative-merge#:~:text=1%20Recursive%20Merge%20Sort%202%20Iterative%20Merge%20Sort,O%20%28n%29%20space%20to%20perform%20the%20merging%20step.


2/6: Work on optimizations for iterative merge sort. 
2/6: Compare the solutions with what I copy pasted. 

2/7: Code the mergesort program iteratively

2/7: Work on a new recursion problem on hackerrank.

2/9: Review: https://www.hackerrank.com/challenges/candies/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dynamic-programming

2/10: Solve https://www.hackerrank.com/challenges/30-linked-list-deletion/problem recursively and iteratively
2/10: Solve https://www.hackerrank.com/challenges/two-strings/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dictionaries-hashmaps using sets.
2/10: Review video for https://www.hackerrank.com/challenges/ctci-ransom-note/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dictionaries-hashmaps
2/10: https://www.hackerrank.com/challenges/30-binary-search-trees/problem
2/10: https://www.hackerrank.com/interview/interview-preparation-kit/trees/challenges
2/10: https://www.hackerrank.com/challenges/binary-search-tree-lowest-common-ancestor/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=trees

2/11: Solve https://www.hackerrank.com/challenges/30-binary-search-trees/problem
2/11: Solve https://www.hackerrank.com/challenges/tree-huffman-decoding/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=trees in my own approach.

2/12: Solve https://www.hackerrank.com/challenges/tree-huffman-decoding/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=trees recusively and iteratively
2/12: Complete https://classroom.udacity.com/courses/ud513/lessons/7122604912/concepts/79198839630923 since I had trouble with the inserting part. 

2/13: 2/12: Solve https://www.hackerrank.com/challenges/tree-huffman-decoding/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=trees recusively and iteratively
2/13: I solved the hackerrank intermediate certification and obviously failed. Count the number of days for it to open back again. 
2/13: I feel as if hackerrank doesn't have too many challenges specific to data structures that are taught systematically.
Plus their solutions aren't really the best either. But the thing is that leetcode has premium subscription that prevents me from some content. 
2/13: I guess I will try leetcode lessons for linked list. 

2/15: Fix the bug for https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1215/ 

2/16: Code the "sandwich solution" for the linked list at https://leetcode.com/explore/learn/card/linked-list/209/singly-linked-list/1290/ 
Answer: https://leetcode.com/submissions/#/1 
2/16: Simple solution to https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1212/
2/16: 2 dummy node solution for https://leetcode.com/problems/remove-nth-node-from-end-of-list/ 
2/16: Recursive method to solve https://leetcode.com/problems/reverse-linked-list/solution/ 
2/16: 2 different approaches other than using memory counter for https://leetcode.com/explore/learn/card/linked-list/219/classic-problems/1207/ 

2/17: Solve: https://leetcode.com/explore/learn/card/linked-list/219/classic-problems/1208/
2/17: Make the version for the value odd and even. 

2/18: Try to understand recursive approach for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1225/discuss/269758/python-recursive-and-iterative
2/18: Code up both the iterative and recursive solution for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1225/ 

2/20: Code the stack solution and memoization solution 

2/21: Code both brute force and optimized solution for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1295/ 

2/22: Final try for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1295/
2/22: Another try for stack solution for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1225/
2/22:Solve fast iterative solution and recursive for https://leetcode.com/explore/learn/card/recursion-i/251/scenario-i-recurrence-relation/3234/ 

2/23: Review solution for https://leetcode.com/explore/learn/card/recursion-i/256/complexity-analysis/2380/
2/23: For the question 'Unique Binary Search Trees 2', I should have first solved 1 and known the concept of catalan's number. 
2/23: Tripped up because didn't have correct if elif structure.
2/23: Though the squares of a sorted array question is easy, fun to think about all the different ways to accomplish it. 

2/24: Review https://leetcode.com/explore/learn/card/fun-with-arrays/521/introduction/3238/ using the most intuitive method. I tend to overcomplicate the condition statement. 
2/24: For the optimized squares solution, I forgot to use the loop variable. 

2/26: Try 3 methods(.remove and shift, order doesn't matter) for https://leetcode.com/explore/learn/card/fun-with-arrays/526/deleting-items-from-an-array/3247/ 
2/26: Found another way of removing duplicates for sorted array but my solution was clearer. 
2/26: Do https://leetcode.com/explore/learn/card/fun-with-arrays/527/searching-for-items-in-an-array/3250/ using both the 0 efficient set method and exception dictionary lookup. 
2/26: For the valid array mountain problem, there were just too many cases to think about. 
2/26: Try the walking through solution for https://leetcode.com/problems/valid-mountain-array/submissions/

2/27: Retry order doesn't matter solution for https://leetcode.com/explore/learn/card/fun-with-arrays/511/in-place-operations/3575/. 
I got correct intuition so don't worry.
2/27: Retry 2 methods (messy and concise) for https://leetcode.com/explore/learn/card/fun-with-arrays/511/in-place-operations/3259/
2/27: Quicksort solution for https://leetcode.com/problems/sort-array-by-parity/
2/27: Set solution for https://leetcode.com/explore/learn/card/fun-with-arrays/523/conclusion/3231/
2/27: Give some thought to the pointer solutions https://leetcode.com/submissions/detail/461077962/?from=explore&item_id=3270 even though set is the fastest. 
2/27: I didn't consider the possiblity of multiple pivots in https://leetcode.com/explore/learn/card/array-and-string/201/introduction-to-array/1144/

2/28: O(1) space solution for https://leetcode.com/explore/learn/card/fun-with-arrays/523/conclusion/3270/
2/28: two pointer faster technique for https://leetcode.com/explore/learn/card/fun-with-arrays/523/conclusion/3574/
2/28: Code easier solution for https://leetcode.com/problems/find-pivot-index/
2/28: Think about more efficient solution for https://leetcode.com/explore/learn/card/array-and-string/201/introduction-to-array/1147/

3/2: Code spacial matrix without searching (O(M*N)) https://leetcode.com/explore/learn/card/array-and-string/202/introduction-to-2d-array/1168/
3/2: Understand time and space complexity of https://leetcode.com/problems/pascals-triangle/
Also, I solved using arr[i] + arr[i+1] but try solving it in arr[i-1] + arr[i+1]
Review the 'big array' solution since I was always creating temp arrays. 

3/4: Solve the spiral matrix problem using 1 layer at a time approach https://leetcode.com/problems/spiral-matrix/solution/ 
I have to think about extreme cases first and then when I get general solution done, I have to plug in edge cases.
3/4: Think of a bigger list approach for https://leetcode.com/problems/pascals-triangle/. 
Use 3 forloops.
3/4: Continue making progress on https://leetcode.com/explore/learn/card/array-and-string/203/introduction-to-string/1161/

3/5: Length block based solution for https://leetcode.com/explore/learn/card/array-and-string/203/introduction-to-string/1161/
3/5: Keep working to solve: https://leetcode.com/explore/learn/card/array-and-string/203/introduction-to-string/1162/


3/6: Just to solve a different questions: solve https://www.hackerrank.com/challenges/30-binary-numbers/problem?isFullScreen=true
3/6: Understand the solution for https://leetcode.com/problems/minimum-size-subarray-sum/solution/

3/7: After the leetcode version, do https://www.hackerrank.com/challenges/ctci-array-left-rotation/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=arrays

3/8: Continue working on https://leetcode.com/problems/rotate-array/solution/
3/8: Two pointer technique and binary seach for https://leetcode.com/explore/learn/card/array-and-string/205/array-two-pointer-technique/1299/
3/8: Wasted 40 minutes not knowing I reused a forloop counter -> probably should give more specific name. 

3/9: Rotating array using reversal for https://www.hackerrank.com/challenges/ctci-array-left-rotation/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=arrays
Use both .reverse() and manual reversal
3/9: Sliding window technique is really difficult... Retry and try to understand intuition from https://leetcode.com/explore/learn/card/array-and-string/205/array-two-pointer-technique/1299/ 
3/9: Contrinue thinking about how to get rid of empty space in https://leetcode.com/explore/learn/card/array-and-string/204/conclusion/1164/

3/10: Solve a from forward solution for https://leetcode.com/explore/learn/card/array-and-string/204/conclusion/1164/
Also use split() solution. 
3/10: Further expand on https://leetcode.com/explore/learn/card/array-and-string/204/conclusion/1165/
Think about how I can prevent for cases with extra heading, trailing,and in between spaces, based on the previous question. 
3/10: Compile a list of questions about list and strings to do. 

3/12: 3 solutions for https://leetcode.com/problems/sort-colors/submissions/. O(nlogn), O(2n) and O(n) solution. 
3/12: O(n) space and O(1) space solution for https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1# 
3/12: Practice shell sort here: https://practice.geeksforgeeks.org/problems/merge-two-sorted-arrays-1587115620/1
3/12: Understood the shell sort algorithm striver explained so I should try to understand the insertion sort one. 

3/14: Understand kadane's algo better. 
3/14: Use kandane's algo to solve https://leetcode.com/problems/maximum-subarray/submissions/

3/15: Practice Kadane's algo: https://leetcode.com/problems/maximum-subarray/submissions/
3/15: Review the optimal solution of https://leetcode.com/problems/merge-intervals/

3/16: O(nlogn + n) solution for https://leetcode.com/problems/merge-intervals/solution/

3/17: Review the idea of cyclic replacements here: https://leetcode.com/problems/find-the-duplicate-number/submissions/
3/17: Finish watching striver's video on setting matrix https://leetcode.com/problems/set-matrix-zeroes/submissions/

4/13: Retry hackerrank intermediate certification. 

3/26: 9pm-11pm: Google code jam qualification round. 
3/27: 8am-3pm Google code jam qualification round. 



Someday:
Since my current goal is to get the problem solving basic certification on hackerrank, I want to problems marked for that. 
Dynamic programming:
https://www.hackerrank.com/challenges/fibonacci-modified/problem
https://www.hackerrank.com/domains/algorithms?filters%5Bskills%5D%5B%5D=Problem%20Solving%20%28Basic%29&filters%5Bsubdomains%5D%5B%5D=dynamic-programming&filters%5Bsubdomains%5D%5B%5D=greedy
https://www.hackerrank.com/challenges/quicksort1/problem
Understand the solution but I won't be able to really code it. 
https://leetcode.com/explore/learn/card/recursion-i/253/conclusion/2384/
When I get better at algorithms, understand https://leetcode.com/problems/duplicate-zeros/solution/ 
In addition with the previous problem, understand https://leetcode.com/explore/learn/card/fun-with-arrays/525/inserting-items-into-an-array/3253/ using 
using https://www.youtube.com/watch?v=zp4huR7LN6M cuz I think they are similar. 
Probably VERY IMPORTANT string algorithms: KMP search, Boyer-Moore, and Rabin-Karp. Try these algorithms for https://leetcode.com/explore/learn/card/array-and-string/203/introduction-to-string/1161/
Though I misunderstood the substring problem, what is longest common "substring" is an array of strings?
3/6: Use the 2 pointer technique for https://leetcode.com/problems/two-sum/: Requires a different approach so do later. 
Understand cyclic replacements on https://leetcode.com/problems/rotate-array/solution/
Learn the concept of XOR
Learn the GAP method for shell sort. 

String algo:
https://leetcode.com/problems/reverse-string-ii/
Tick mark represents that I have completed the exercise. 

When looking through hackerrank questions offered, 
1. Must set question level to problem solving basic
2. Select all the categories individually so I can actually get through everything

Leetcode:
Top 100 liked questions through the status page. 
Work way up for data structures too. 
When looking solutions, print solution and understand. 

1. Find most relevant problems
2. Thought process behind building the solution. 
3. Start at easy problems. 
4. Simulate your interview scenario. List out all mistakes and test cases I made mistakes on. Make a list of all past mistakes and look at them when solving problem.
5. What is it that I was missing: didn't know initial technique or got stuck at middle? Allign thought process. 

Mock interviews on leetcode seem kind of like hackerrank's certification. 

The orders I will do leetcode problems in

array101 -> array and string -> recursion1 -> linked list 

Array and string questions to work on:
https://leetcode.com/tag/array/
https://leetcode.com/tag/string/

I like following things so I will first follow 
https://docs.google.com/document/d/1SM92efk8oDl8nyVw8NHPnbGexTS9W-1gmTEYfEurLWQ/edit
Usually there is a leetcode problem link so follow that. 







