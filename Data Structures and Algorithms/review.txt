1/29: https://www.hackerrank.com/challenges/insert-a-node-at-a-specific-position-in-a-linked-list/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=linked-lists

1/31: Reversing a linked list iteratively
1/31: Reversing a linked list recursively
1/31: https://www.hackerrank.com/challenges/reverse-a-doubly-linked-list/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=linked-lists

2/1: Reversing a linked list recursively
2/1: Find merge point of linked list using while loop
2/1: Find merge point of linked list using for loop
2/1: Find merge point of linked list using set. 

2/2: Find merge point of linked list in best method. 
2/2: It has been a long time and I want to review quicksort lomuto
2/2: And quicksort hoare. 
2/2: And binary search

2/3: Solve the specific case of the recursive staircase problem without using bottom up on https://www.hackerrank.com/challenges/ctci-recursive-staircase/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=recursion-backtracking
2/3: Solve the specific case of the recursive staircase problem using bottom up on https://www.hackerrank.com/challenges/ctci-recursive-staircase/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=recursion-backtracking
2/3: Solve a more general case of recursive staircase (can step any number of stairs in a certain set)
2/3: Solving fibonacci using a bottom-up approach.  
2/3: Quicksort lomuto (including duplicates). 
2/3: Quicksort hoare (including duplicates). 
2/3: Quicksort udacity
2/3: Binary search iteratively. 
2/3: Binary search recursively. 
2/3: Merge sort. 

2/4: Practice recursive staircase problem with memoization https://www.hackerrank.com/challenges/ctci-recursive-staircase/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=recursion-backtracking
2/4: Quicksort udacity
2/4: Solve the mergesort problem recursively: https://practice.geeksforgeeks.org/problems/merge-sort/1 
2/4: Figure out how to solve merge sort iteratively. 

2/5: Solve the mergesort problem recursively:https://practice.geeksforgeeks.org/problems/merge-sort/1 
2/5: Solve the mergesort problem recursively with copying only the left side of the array and only using one big array and adding special condition. https://practice.geeksforgeeks.org/problems/merge-sort/1 

https://dzone.com/articles/recursive-and-iterative-merge#:~:text=1%20Recursive%20Merge%20Sort%202%20Iterative%20Merge%20Sort,O%20%28n%29%20space%20to%20perform%20the%20merging%20step.


2/6: Work on optimizations for iterative merge sort. 
2/6: Compare the solutions with what I copy pasted. 

2/7: Code the mergesort program iteratively

2/7: Work on a new recursion problem on hackerrank.

2/9: Review: https://www.hackerrank.com/challenges/candies/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dynamic-programming

2/10: Solve https://www.hackerrank.com/challenges/30-linked-list-deletion/problem recursively and iteratively
2/10: Solve https://www.hackerrank.com/challenges/two-strings/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dictionaries-hashmaps using sets.
2/10: Review video for https://www.hackerrank.com/challenges/ctci-ransom-note/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dictionaries-hashmaps
2/10: https://www.hackerrank.com/challenges/30-binary-search-trees/problem
2/10: https://www.hackerrank.com/interview/interview-preparation-kit/trees/challenges
2/10: https://www.hackerrank.com/challenges/binary-search-tree-lowest-common-ancestor/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=trees

2/11: Solve https://www.hackerrank.com/challenges/30-binary-search-trees/problem
2/11: Solve https://www.hackerrank.com/challenges/tree-huffman-decoding/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=trees in my own approach.

2/12: Solve https://www.hackerrank.com/challenges/tree-huffman-decoding/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=trees recusively and iteratively
2/12: Complete https://classroom.udacity.com/courses/ud513/lessons/7122604912/concepts/79198839630923 since I had trouble with the inserting part. 

2/13: 2/12: Solve https://www.hackerrank.com/challenges/tree-huffman-decoding/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=trees recusively and iteratively
2/13: I solved the hackerrank intermediate certification and obviously failed. Count the number of days for it to open back again. 
2/13: I feel as if hackerrank doesn't have too many challenges specific to data structures that are taught systematically.
Plus their solutions aren't really the best either. But the thing is that leetcode has premium subscription that prevents me from some content. 
2/13: I guess I will try leetcode lessons for linked list. 

2/15: Fix the bug for https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1215/ 

2/16: Code the "sandwich solution" for the linked list at https://leetcode.com/explore/learn/card/linked-list/209/singly-linked-list/1290/ 
Answer: https://leetcode.com/submissions/#/1 
2/16: Simple solution to https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1212/
2/16: 2 dummy node solution for https://leetcode.com/problems/remove-nth-node-from-end-of-list/ 
2/16: Recursive method to solve https://leetcode.com/problems/reverse-linked-list/solution/ 
2/16: 2 different approaches other than using memory counter for https://leetcode.com/explore/learn/card/linked-list/219/classic-problems/1207/ 

2/17: Solve: https://leetcode.com/explore/learn/card/linked-list/219/classic-problems/1208/
2/17: Make the version for the value odd and even. 

2/18: Try to understand recursive approach for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1225/discuss/269758/python-recursive-and-iterative
2/18: Code up both the iterative and recursive solution for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1225/ 

2/20: Code the stack solution and memoization solution 

2/21: Code both brute force and optimized solution for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1295/ 

2/22: Final try for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1295/
2/22: Another try for stack solution for https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1225/
2/22:Solve fast iterative solution and recursive for https://leetcode.com/explore/learn/card/recursion-i/251/scenario-i-recurrence-relation/3234/ 

Someday:
Try to solve this https://www.hackerrank.com/challenges/crossword-puzzle/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=recursion-backtracking problem
on hackerrank since it is a little too complicated for me to understand right now. 


Since my current goal is to get the problem solving basic certification on hackerrank, I want to problems marked for that. 
Dynamic programming:
https://www.hackerrank.com/challenges/fibonacci-modified/problem
https://www.hackerrank.com/domains/algorithms?filters%5Bskills%5D%5B%5D=Problem%20Solving%20%28Basic%29&filters%5Bsubdomains%5D%5B%5D=dynamic-programming&filters%5Bsubdomains%5D%5B%5D=greedy
https://www.hackerrank.com/challenges/quicksort1/problem



When looking through hackerrank questions offered, 
1. Must set question level to problem solving basic
2. Select all the categories individually so I can actually get through everything








